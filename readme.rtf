{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red36\green38\blue41;
\red235\green236\blue237;\red37\green127\blue159;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;\cssrgb\c18824\c20000\c21176;
\cssrgb\c93725\c94118\c94510;\cssrgb\c16863\c56863\c68627;}
\margl1440\margr1440\vieww15420\viewh7800\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 #Build docker image\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb1 docker build --tag=percona-server-mongodb --build-arg sslDir=ssl/1stReconBn .\cf2 \cb3 \
\
\cf2 \cb1 docker run --name hipaa-mongodb-container0 -p 27017:27017 -t percona-server-mongodb:latest --sslMode requireSSL --sslPEMKeyFile /mongossl/mongodb.pem --sslCAFile /mongossl/rootCA.pem --enableEncryption --encryptionKeyFile /mongossl/mongodb_encryption.key --replSet rs0 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json\
\
docker run --name hipaa-mongodb-container0 -v /usr/local/var/mongodb:/data/db -v /usr/local/var/log/mongodb:/mongologs -p 172.31.42.247:27017:27017 -t percona-server-mongodb:latest --sslMode requireSSL --sslPEMKeyFile /mongossl/mongodb.pem --sslCAFile /mongossl/rootCA.pem --enableEncryption --encryptionKeyFile /mongossl/mongodb_encryption.key --replSet rs0 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json\cf2 \cb3 \
\
\
#Run docker normally when all replicas are setup correctly (authentication on)\
\cf2 \cb1 docker run --name percona-mongo -v /usr/local/var/mongodb:/data/db -v /usr/local/var/log/mongodb:/mongologs -p 172.31.42.247:27017:27017 -t percona-server-mongodb:latest --sslMode requireSSL --sslPEMKeyFile /mongossl/mongodb.pem --sslCAFile /mongossl/rootCA.pem --enableEncryption --encryptionKeyFile /mongossl/mongodb_encryption.key --replSet rs0 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json --auth \cf2 \cb3 \
\
#Becoming a replica\'85 https://docs.mongodb.com/manual/reference/method/rs.add/\
1) Start new machine in replica mode using one of the commands below (don\'92t use \'97-auth flag on any machine)\
2) Go to PRIMARY machine and add IP of new machine by connecting\
 - \cf2 \cb1 rs.add(\{ host: "172.31.42.64:27017", priority: 0, votes: 0 \})\
3) Can check status of added host: rs.status()\cf2 \cb3 \
#Becoming replica set (If you are a different machine trying to become of a machine using port 27017 - Be sure to change to this machines IP)\
\cf2 \cb1 4) docker run --name percona-mongo -v /usr/local/var/mongodb:/data/db -v /usr/local/var/log/mongodb:/mongologs -p 172.31.42.247:27017:27017 -t percona-server-mongodb:latest --sslMode requireSSL --sslPEMKeyFile /mongossl/mongodb.pem --sslCAFile /mongossl/rootCA.pem --enableEncryption --encryptionKeyFile /mongossl/mongodb_encryption.key --replSet rs0 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json\cf2 \cb3 \
\
\
4) Using mongo directly: \cf2 \cb1 mongo --host 172.31.42.247:27017 --ssl --sslPEMKeyFile ~/Documents/Server/mongoCA/ssl/1stReconBn/mongodb.pem --sslCAFile ~/Documents/Server/mongoCA/ssl/rootCA.pem \cf2 \cb3 -u parseServer -p vRkLtHD5xRYs --authenticationDatabase=admin\
\
\
#Becoming replica set (If you need to clone original data from server first using the 27018 port - Be sure to change to this machines IP)\
1) On host machine can start up Mongo by:\
\cf2 \cb1 mongod --port 27017 --dbpath /usr/local/var/mongodb --replSet rs0 --bind_ip localhost,172.31.42.247 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json\
\
2) connect to host by mongo \'97-host 127.0.0.1::27017\
\
3) Add current machine rs.initiate( \{    _id : "rs0",    members: [\{ _id: 0, host: "127.0.0.1::27017\'94 \}, \{ _id: 1, host: "127.0.0.1::27018\'94 \}] \})\
\
4) Then\cf2 \cb3 \
\cf2 \cb1 docker run --name percona-mongo-replica -v /Users/netreconlab/Documents/Server/mongoNew2:/data/db -v /usr/local/var/log/mongodb:/mongologs -p 172.31.42.247:27018:27017 -t percona-server-mongodb:latest\cf2 \cb3  \cf2 \cb1 --enableEncryption --encryptionKeyFile mongodb_encryption.key --replSet rs0 --keyFile /mongossl/mongo_auth.key --logpath /mongologs/mongo.log --logappend --auditDestination=file --auditPath /mongologs/audit.json\
\
#Attach to container as root\
docker exec -i -it -u root percona-mongo bash\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \cb3 docker exec 
\fs18 -u root
\fs22  -ti apps_web_1 /bin/sh\cf2 \cb1 \
\
#Change password \
passwd\
\
Running on each machine (remember to change the port on the proxy service, currently to have a way to pass as an arg)\
\cf2 \cb3 docker-compose build --build-arg sslDir=./ssl/3dReconBn mongo\cf2 \cb1 \
\cf2 \cb3 docker-compose build --build-arg sslDir=./ssl/1stReconBn\cf2 \cb1 \
\cf2 \cb3 docker-compose build --build-arg sslDir=./ssl/2dReconBn\
docker-compose build --build-arg sslDir=./ssl/3dReconBn\
\pard\pardeftab720\partightenfactor0
mongo --port 27017 -u parseServer -p vRkLtHD5xRYs --authenticationDatabase=admin \'97ssl\cb1 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf4 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 sudo lsof -\cf6 PiTCP\cf4  -sTCP:LISTEN}